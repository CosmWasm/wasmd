syntax = "proto3";

package cosmwasm;

option go_package = "github.com/CosmWasm/wasmd/proto";

// Context message for blockchain-related information
message Context {
  uint64 block_height = 1;
  string sender = 2;
  string chain_id = 3;
}

// ExtendedContext includes callback service information for storage support
message ExtendedContext {
  Context context = 1;
  string callback_service = 2; // Address of the HostService for callbacks
}

// WasmVMService: RPC interface for wasmvm
service WasmVMService {
  // Module lifecycle management
  rpc LoadModule(LoadModuleRequest) returns (LoadModuleResponse);
  rpc RemoveModule(RemoveModuleRequest) returns (RemoveModuleResponse);
  rpc PinModule(PinModuleRequest) returns (PinModuleResponse);
  rpc UnpinModule(UnpinModuleRequest) returns (UnpinModuleResponse);
  rpc GetCode(GetCodeRequest)
      returns (GetCodeResponse); // Retrieve raw WASM bytes

  // Contract execution calls
  rpc Instantiate(InstantiateRequest) returns (InstantiateResponse);
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  rpc Query(QueryRequest) returns (QueryResponse);
  rpc Migrate(MigrateRequest) returns (MigrateResponse);
  rpc Sudo(SudoRequest) returns (SudoResponse);
  rpc Reply(ReplyRequest) returns (ReplyResponse);

  // Storage-aware contract execution calls (enhanced versions)
  rpc InstantiateWithStorage(ExtendedInstantiateRequest) returns (InstantiateResponse);
  rpc ExecuteWithStorage(ExtendedExecuteRequest) returns (ExecuteResponse);
  rpc QueryWithStorage(ExtendedQueryRequest) returns (QueryResponse);
  rpc MigrateWithStorage(ExtendedMigrateRequest) returns (MigrateResponse);

  // Code analysis
  rpc AnalyzeCode(AnalyzeCodeRequest) returns (AnalyzeCodeResponse);

  // Metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
  rpc GetPinnedMetrics(GetPinnedMetricsRequest)
      returns (GetPinnedMetricsResponse);

  // Utility functions
  rpc LibwasmvmVersion(LibwasmvmVersionRequest) returns (LibwasmvmVersionResponse);
  rpc CreateChecksum(CreateChecksumRequest) returns (CreateChecksumResponse);

  // IBC Entry Points
  // All IBC calls typically share a similar request/response structure
  // with checksum, context, message, gas limit, and request ID.
  // Their responses usually contain data, gas used, and an error.
  rpc IbcChannelOpen(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcChannelConnect(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcChannelClose(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcPacketReceive(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcPacketAck(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcPacketTimeout(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcSourceCallback(IbcMsgRequest) returns (IbcMsgResponse);
  rpc IbcDestinationCallback(IbcMsgRequest) returns (IbcMsgResponse);
  rpc Ibc2PacketReceive(IbcMsgRequest) returns (IbcMsgResponse);
  rpc Ibc2PacketAck(IbcMsgRequest) returns (IbcMsgResponse);
  rpc Ibc2PacketTimeout(IbcMsgRequest) returns (IbcMsgResponse);
  rpc Ibc2PacketSend(IbcMsgRequest) returns (IbcMsgResponse);
}

// HostService: Enhanced RPC interface for host function callbacks
// This service is called by the VM to interact with storage, query chain state,
// and use other host-provided functionality
service HostService {
  // Legacy generic host function call
  rpc CallHostFunction(CallHostFunctionRequest) returns (CallHostFunctionResponse);
  
  // Storage operations
  rpc StorageGet(StorageGetRequest) returns (StorageGetResponse);
  rpc StorageSet(StorageSetRequest) returns (StorageSetResponse);
  rpc StorageDelete(StorageDeleteRequest) returns (StorageDeleteResponse);
  rpc StorageIterator(StorageIteratorRequest) returns (stream StorageIteratorResponse);
  rpc StorageReverseIterator(StorageReverseIteratorRequest) returns (stream StorageReverseIteratorResponse);
  
  // Query operations
  rpc QueryChain(QueryChainRequest) returns (QueryChainResponse);
  
  // GoAPI operations
  rpc HumanizeAddress(HumanizeAddressRequest) returns (HumanizeAddressResponse);
  rpc CanonicalizeAddress(CanonicalizeAddressRequest) returns (CanonicalizeAddressResponse);
  
  // Gas meter operations
  rpc ConsumeGas(ConsumeGasRequest) returns (ConsumeGasResponse);
  rpc GetGasRemaining(GetGasRemainingRequest) returns (GetGasRemainingResponse);
}

// --- Common Message Types ---

message LoadModuleRequest { bytes module_bytes = 1; }

message LoadModuleResponse {
  string checksum = 1; // SHA256 checksum of the module (hex encoded)
  string error = 2;
}

message InstantiateRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes init_msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message ExtendedInstantiateRequest {
  string checksum = 1;
  ExtendedContext context = 2;
  bytes init_msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message InstantiateResponse {
  string contract_id = 1; // Identifier for the instantiated contract, typically
                          // derived from request_id or a unique hash
  bytes data = 2;         // Binary response data from the contract
  uint64 gas_used = 3;
  string error = 4;
}

message ExecuteRequest {
  string contract_id = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message ExtendedExecuteRequest {
  string contract_id = 1;
  ExtendedContext context = 2;
  bytes msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message ExecuteResponse {
  bytes data = 1;
  uint64 gas_used = 2;
  string error = 3;
}

message QueryRequest {
  string contract_id = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes query_msg = 3;
  string request_id = 4;
}

message ExtendedQueryRequest {
  string contract_id = 1;
  ExtendedContext context = 2;
  bytes query_msg = 3;
  string request_id = 4;
}

message QueryResponse {
  bytes result = 1; // Binary query response data
  string error = 2;
}

message MigrateRequest {
  string contract_id = 1; // Hex encoded checksum of the existing contract
  string checksum =
      2; // Hex encoded checksum of the new WASM module for migration
  Context context = 3;
  bytes migrate_msg = 4;
  uint64 gas_limit = 5;
  string request_id = 6;
}

message ExtendedMigrateRequest {
  string contract_id = 1;
  string checksum = 2;
  ExtendedContext context = 3;
  bytes migrate_msg = 4;
  uint64 gas_limit = 5;
  string request_id = 6;
}

message MigrateResponse {
  bytes data = 1;
  uint64 gas_used = 2;
  string error = 3;
}

message SudoRequest {
  string contract_id = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message SudoResponse {
  bytes data = 1;
  uint64 gas_used = 2;
  string error = 3;
}

message ReplyRequest {
  string contract_id = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes reply_msg = 3;
  uint64 gas_limit = 4;
  string request_id = 5;
}

message ReplyResponse {
  bytes data = 1;
  uint64 gas_used = 2;
  string error = 3;
}

message AnalyzeCodeRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module
}

message AnalyzeCodeResponse {
  repeated string required_capabilities =
      1; // Comma-separated list of required capabilities
  bool has_ibc_entry_points = 2; // True if IBC entry points are detected
  string error = 3;
}

// --- Host Service Message Types ---

message CallHostFunctionRequest {
  string function_name = 1;
  bytes args = 2; // Binary arguments specific to the host function
  Context context = 3;
  string request_id = 4;
}

message CallHostFunctionResponse {
  bytes result = 1;
  string error = 2;
}

// Storage messages
message StorageGetRequest {
  string request_id = 1;
  bytes key = 2;
}

message StorageGetResponse {
  bytes value = 1;
  bool exists = 2;
  string error = 3;
}

message StorageSetRequest {
  string request_id = 1;
  bytes key = 2;
  bytes value = 3;
}

message StorageSetResponse {
  string error = 1;
}

message StorageDeleteRequest {
  string request_id = 1;
  bytes key = 2;
}

message StorageDeleteResponse {
  string error = 1;
}

message StorageIteratorRequest {
  string request_id = 1;
  bytes start = 2;
  bytes end = 3;
}

message StorageIteratorResponse {
  bytes key = 1;
  bytes value = 2;
  bool done = 3;
  string error = 4;
}

message StorageReverseIteratorRequest {
  string request_id = 1;
  bytes start = 2;
  bytes end = 3;
}

message StorageReverseIteratorResponse {
  bytes key = 1;
  bytes value = 2;
  bool done = 3;
  string error = 4;
}

// Query messages
message QueryChainRequest {
  string request_id = 1;
  bytes query = 2; // Serialized QueryRequest
  uint64 gas_limit = 3;
}

message QueryChainResponse {
  bytes result = 1;
  string error = 2;
}

// GoAPI messages
message HumanizeAddressRequest {
  string request_id = 1;
  bytes canonical = 2;
}

message HumanizeAddressResponse {
  string human = 1;
  uint64 gas_used = 2;
  string error = 3;
}

message CanonicalizeAddressRequest {
  string request_id = 1;
  string human = 2;
}

message CanonicalizeAddressResponse {
  bytes canonical = 1;
  uint64 gas_used = 2;
  string error = 3;
}

// Gas meter messages
message ConsumeGasRequest {
  string request_id = 1;
  uint64 amount = 2;
  string descriptor = 3;
}

message ConsumeGasResponse {
  string error = 1;
}

message GetGasRemainingRequest {
  string request_id = 1;
}

message GetGasRemainingResponse {
  uint64 gas_remaining = 1;
  string error = 2;
}

// --- Extended Functionality Message Types ---

message RemoveModuleRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module to remove
}

message RemoveModuleResponse {
  string error = 1; // Error message if removal failed
}

message PinModuleRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module to pin
}

message PinModuleResponse {
  string error = 1; // Error message if pinning failed
}

message UnpinModuleRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module to unpin
}

message UnpinModuleResponse {
  string error = 1; // Error message if unpinning failed
}

message GetCodeRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module to retrieve
}

message GetCodeResponse {
  bytes module_bytes = 1; // Raw WASM bytes
  string error = 2;
}

message Metrics {
  uint32 hits_pinned_memory_cache = 1;
  uint32 hits_memory_cache = 2;
  uint32 hits_fs_cache = 3;
  uint32 misses = 4;
  uint64 elements_pinned_memory_cache = 5;
  uint64 elements_memory_cache = 6;
  uint64 size_pinned_memory_cache = 7;
  uint64 size_memory_cache = 8;
}

message GetMetricsRequest {}

message GetMetricsResponse {
  Metrics metrics = 1;
  string error = 2;
}

message PerModuleMetrics {
  uint32 hits = 1;
  uint64 size = 2; // Size of the module in bytes
}

message PinnedMetrics {
  // Map from hex-encoded checksum to its metrics
  map<string, PerModuleMetrics> per_module = 1;
}

message GetPinnedMetricsRequest {}

message GetPinnedMetricsResponse {
  PinnedMetrics pinned_metrics = 1;
  string error = 2;
}

// Generalized IBC Message Request/Response for various IBC entry points
// This structure is reused across all IBC-related RPC calls in WasmVMService
message IbcMsgRequest {
  string checksum = 1; // Hex encoded checksum of the WASM module
  Context context = 2;
  bytes msg = 3; // Binary message for the IBC call
  uint64 gas_limit = 4;
  string request_id = 5;
}

message IbcMsgResponse {
  bytes data = 1; // Binary response data from the contract
  uint64 gas_used = 2;
  string error = 3;
}

// Utility message types
message LibwasmvmVersionRequest {}

message LibwasmvmVersionResponse {
  string version = 1;
  string error = 2;
}

message CreateChecksumRequest {
  bytes wasm_code = 1;
}

message CreateChecksumResponse {
  string checksum = 1; // Hex encoded checksum
  string error = 2;
}