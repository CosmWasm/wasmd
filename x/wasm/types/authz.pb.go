// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasm/wasm/v1/authz.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoreCodeAuthorization defines authorization for wasm code upload.
// Since: wasmd 0.42
type StoreCodeAuthorization struct {
	// Grants for code upload
	Grants []CodeGrant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants"`
}

func (m *StoreCodeAuthorization) Reset()         { *m = StoreCodeAuthorization{} }
func (m *StoreCodeAuthorization) String() string { return proto.CompactTextString(m) }
func (*StoreCodeAuthorization) ProtoMessage()    {}
func (*StoreCodeAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{0}
}

func (m *StoreCodeAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *StoreCodeAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreCodeAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *StoreCodeAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreCodeAuthorization.Merge(m, src)
}

func (m *StoreCodeAuthorization) XXX_Size() int {
	return m.Size()
}

func (m *StoreCodeAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreCodeAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_StoreCodeAuthorization proto.InternalMessageInfo

// ContractExecutionAuthorization defines authorization for wasm execute.
// Since: wasmd 0.30
type ContractExecutionAuthorization struct {
	// Grants for contract executions
	Grants []ContractGrant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants"`
}

func (m *ContractExecutionAuthorization) Reset()         { *m = ContractExecutionAuthorization{} }
func (m *ContractExecutionAuthorization) String() string { return proto.CompactTextString(m) }
func (*ContractExecutionAuthorization) ProtoMessage()    {}
func (*ContractExecutionAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{1}
}

func (m *ContractExecutionAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ContractExecutionAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractExecutionAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ContractExecutionAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractExecutionAuthorization.Merge(m, src)
}

func (m *ContractExecutionAuthorization) XXX_Size() int {
	return m.Size()
}

func (m *ContractExecutionAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractExecutionAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_ContractExecutionAuthorization proto.InternalMessageInfo

// ContractMigrationAuthorization defines authorization for wasm contract
// migration. Since: wasmd 0.30
type ContractMigrationAuthorization struct {
	// Grants for contract migrations
	Grants []ContractGrant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants"`
}

func (m *ContractMigrationAuthorization) Reset()         { *m = ContractMigrationAuthorization{} }
func (m *ContractMigrationAuthorization) String() string { return proto.CompactTextString(m) }
func (*ContractMigrationAuthorization) ProtoMessage()    {}
func (*ContractMigrationAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{2}
}

func (m *ContractMigrationAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ContractMigrationAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractMigrationAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ContractMigrationAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractMigrationAuthorization.Merge(m, src)
}

func (m *ContractMigrationAuthorization) XXX_Size() int {
	return m.Size()
}

func (m *ContractMigrationAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractMigrationAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_ContractMigrationAuthorization proto.InternalMessageInfo

// CodeGrant a granted permission for a single code
type CodeGrant struct {
	// CodeHash is the unique identifier created by wasmvm
	// Wildcard "*" is used to specify any kind of grant.
	CodeHash []byte `protobuf:"bytes,1,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// InstantiatePermission is the superset access control to apply
	// on contract creation.
	// Optional
	InstantiatePermission *AccessConfig `protobuf:"bytes,2,opt,name=instantiate_permission,json=instantiatePermission,proto3" json:"instantiate_permission,omitempty"`
}

func (m *CodeGrant) Reset()         { *m = CodeGrant{} }
func (m *CodeGrant) String() string { return proto.CompactTextString(m) }
func (*CodeGrant) ProtoMessage()    {}
func (*CodeGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{3}
}

func (m *CodeGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CodeGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CodeGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeGrant.Merge(m, src)
}

func (m *CodeGrant) XXX_Size() int {
	return m.Size()
}

func (m *CodeGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeGrant.DiscardUnknown(m)
}

var xxx_messageInfo_CodeGrant proto.InternalMessageInfo

// ContractGrant a granted permission for a single contract
// Since: wasmd 0.30
type ContractGrant struct {
	// Contract is the bech32 address of the smart contract
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// Limit defines execution limits that are enforced and updated when the grant
	// is applied. When the limit lapsed the grant is removed.
	Limit *types.Any `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filter define more fine-grained control on the message payload passed
	// to the contract in the operation. When no filter applies on execution, the
	// operation is prohibited.
	Filter *types.Any `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *ContractGrant) Reset()         { *m = ContractGrant{} }
func (m *ContractGrant) String() string { return proto.CompactTextString(m) }
func (*ContractGrant) ProtoMessage()    {}
func (*ContractGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{4}
}

func (m *ContractGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ContractGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ContractGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractGrant.Merge(m, src)
}

func (m *ContractGrant) XXX_Size() int {
	return m.Size()
}

func (m *ContractGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractGrant.DiscardUnknown(m)
}

var xxx_messageInfo_ContractGrant proto.InternalMessageInfo

// MaxCallsLimit limited number of calls to the contract. No funds transferable.
// Since: wasmd 0.30
type MaxCallsLimit struct {
	// Remaining number that is decremented on each execution
	Remaining uint64 `protobuf:"varint,1,opt,name=remaining,proto3" json:"remaining,omitempty"`
}

func (m *MaxCallsLimit) Reset()         { *m = MaxCallsLimit{} }
func (m *MaxCallsLimit) String() string { return proto.CompactTextString(m) }
func (*MaxCallsLimit) ProtoMessage()    {}
func (*MaxCallsLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{5}
}

func (m *MaxCallsLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MaxCallsLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxCallsLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MaxCallsLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxCallsLimit.Merge(m, src)
}

func (m *MaxCallsLimit) XXX_Size() int {
	return m.Size()
}

func (m *MaxCallsLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxCallsLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MaxCallsLimit proto.InternalMessageInfo

// MaxFundsLimit defines the maximal amounts that can be sent to the contract.
// Since: wasmd 0.30
type MaxFundsLimit struct {
	// Amounts is the maximal amount of tokens transferable to the contract.
	Amounts github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
}

func (m *MaxFundsLimit) Reset()         { *m = MaxFundsLimit{} }
func (m *MaxFundsLimit) String() string { return proto.CompactTextString(m) }
func (*MaxFundsLimit) ProtoMessage()    {}
func (*MaxFundsLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{6}
}

func (m *MaxFundsLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MaxFundsLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxFundsLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MaxFundsLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxFundsLimit.Merge(m, src)
}

func (m *MaxFundsLimit) XXX_Size() int {
	return m.Size()
}

func (m *MaxFundsLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxFundsLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MaxFundsLimit proto.InternalMessageInfo

// CombinedLimit defines the maximal amounts that can be sent to a contract and
// the maximal number of calls executable. Both need to remain >0 to be valid.
// Since: wasmd 0.30
type CombinedLimit struct {
	// Remaining number that is decremented on each execution
	CallsRemaining uint64 `protobuf:"varint,1,opt,name=calls_remaining,json=callsRemaining,proto3" json:"calls_remaining,omitempty"`
	// Amounts is the maximal amount of tokens transferable to the contract.
	Amounts github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
}

func (m *CombinedLimit) Reset()         { *m = CombinedLimit{} }
func (m *CombinedLimit) String() string { return proto.CompactTextString(m) }
func (*CombinedLimit) ProtoMessage()    {}
func (*CombinedLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{7}
}

func (m *CombinedLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CombinedLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombinedLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CombinedLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombinedLimit.Merge(m, src)
}

func (m *CombinedLimit) XXX_Size() int {
	return m.Size()
}

func (m *CombinedLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_CombinedLimit.DiscardUnknown(m)
}

var xxx_messageInfo_CombinedLimit proto.InternalMessageInfo

// AllowAllMessagesFilter is a wildcard to allow any type of contract payload
// message.
// Since: wasmd 0.30
type AllowAllMessagesFilter struct{}

func (m *AllowAllMessagesFilter) Reset()         { *m = AllowAllMessagesFilter{} }
func (m *AllowAllMessagesFilter) String() string { return proto.CompactTextString(m) }
func (*AllowAllMessagesFilter) ProtoMessage()    {}
func (*AllowAllMessagesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{8}
}

func (m *AllowAllMessagesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *AllowAllMessagesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowAllMessagesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *AllowAllMessagesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowAllMessagesFilter.Merge(m, src)
}

func (m *AllowAllMessagesFilter) XXX_Size() int {
	return m.Size()
}

func (m *AllowAllMessagesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowAllMessagesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AllowAllMessagesFilter proto.InternalMessageInfo

// AcceptedMessageKeysFilter accept only the specific contract message keys in
// the json object to be executed.
// Since: wasmd 0.30
type AcceptedMessageKeysFilter struct {
	// Messages is the list of unique keys
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *AcceptedMessageKeysFilter) Reset()         { *m = AcceptedMessageKeysFilter{} }
func (m *AcceptedMessageKeysFilter) String() string { return proto.CompactTextString(m) }
func (*AcceptedMessageKeysFilter) ProtoMessage()    {}
func (*AcceptedMessageKeysFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{9}
}

func (m *AcceptedMessageKeysFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *AcceptedMessageKeysFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedMessageKeysFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *AcceptedMessageKeysFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedMessageKeysFilter.Merge(m, src)
}

func (m *AcceptedMessageKeysFilter) XXX_Size() int {
	return m.Size()
}

func (m *AcceptedMessageKeysFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedMessageKeysFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedMessageKeysFilter proto.InternalMessageInfo

// AcceptedMessagesFilter accept only the specific raw contract messages to be
// executed.
// Since: wasmd 0.30
type AcceptedMessagesFilter struct {
	// Messages is the list of raw contract messages
	Messages []RawContractMessage `protobuf:"bytes,1,rep,name=messages,proto3,casttype=RawContractMessage" json:"messages,omitempty"`
}

func (m *AcceptedMessagesFilter) Reset()         { *m = AcceptedMessagesFilter{} }
func (m *AcceptedMessagesFilter) String() string { return proto.CompactTextString(m) }
func (*AcceptedMessagesFilter) ProtoMessage()    {}
func (*AcceptedMessagesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ff3a20cf32b258, []int{10}
}

func (m *AcceptedMessagesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *AcceptedMessagesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedMessagesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *AcceptedMessagesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedMessagesFilter.Merge(m, src)
}

func (m *AcceptedMessagesFilter) XXX_Size() int {
	return m.Size()
}

func (m *AcceptedMessagesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedMessagesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedMessagesFilter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreCodeAuthorization)(nil), "cosmwasm.wasm.v1.StoreCodeAuthorization")
	proto.RegisterType((*ContractExecutionAuthorization)(nil), "cosmwasm.wasm.v1.ContractExecutionAuthorization")
	proto.RegisterType((*ContractMigrationAuthorization)(nil), "cosmwasm.wasm.v1.ContractMigrationAuthorization")
	proto.RegisterType((*CodeGrant)(nil), "cosmwasm.wasm.v1.CodeGrant")
	proto.RegisterType((*ContractGrant)(nil), "cosmwasm.wasm.v1.ContractGrant")
	proto.RegisterType((*MaxCallsLimit)(nil), "cosmwasm.wasm.v1.MaxCallsLimit")
	proto.RegisterType((*MaxFundsLimit)(nil), "cosmwasm.wasm.v1.MaxFundsLimit")
	proto.RegisterType((*CombinedLimit)(nil), "cosmwasm.wasm.v1.CombinedLimit")
	proto.RegisterType((*AllowAllMessagesFilter)(nil), "cosmwasm.wasm.v1.AllowAllMessagesFilter")
	proto.RegisterType((*AcceptedMessageKeysFilter)(nil), "cosmwasm.wasm.v1.AcceptedMessageKeysFilter")
	proto.RegisterType((*AcceptedMessagesFilter)(nil), "cosmwasm.wasm.v1.AcceptedMessagesFilter")
}

func init() { proto.RegisterFile("cosmwasm/wasm/v1/authz.proto", fileDescriptor_36ff3a20cf32b258) }

var fileDescriptor_36ff3a20cf32b258 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0x02, 0xa5, 0x78, 0x80, 0xfe, 0x58, 0x51, 0xcb, 0x06, 0xb4, 0x46, 0xdb, 0x5f, 0x2e,
	0x92, 0x77, 0x65, 0xda, 0x5e, 0x7c, 0x68, 0x65, 0xbb, 0xa5, 0xad, 0x0a, 0x55, 0xb5, 0x24, 0x02,
	0xe5, 0x62, 0x8d, 0x77, 0x87, 0xf5, 0x84, 0xdd, 0x19, 0x6b, 0x67, 0x0c, 0x18, 0x29, 0xca, 0x3d,
	0xa7, 0xdc, 0x72, 0xcd, 0x31, 0xca, 0x89, 0x83, 0x8f, 0xf9, 0x03, 0x10, 0x27, 0x94, 0x53, 0x4e,
	0x24, 0x01, 0x45, 0xfc, 0x03, 0x39, 0xe5, 0x14, 0xed, 0xcc, 0xd8, 0xc6, 0xc6, 0x20, 0xc2, 0x89,
	0xcb, 0xd8, 0xf3, 0xde, 0xbc, 0xf7, 0xbe, 0xef, 0xcd, 0x37, 0x6f, 0xc1, 0xbc, 0x4b, 0x59, 0xb8,
	0x03, 0x59, 0x68, 0x8b, 0x65, 0xbb, 0x60, 0xc3, 0x26, 0xaf, 0xef, 0x59, 0x8d, 0x88, 0x72, 0xaa,
	0x7f, 0xd5, 0xf1, 0x5a, 0x62, 0xd9, 0x2e, 0xcc, 0xce, 0xf8, 0xd4, 0xa7, 0xc2, 0x69, 0xc7, 0xff,
	0xe4, 0xb9, 0xd9, 0x4c, 0x7c, 0x8e, 0xb2, 0xaa, 0x74, 0xc8, 0x8d, 0x72, 0x19, 0x72, 0x67, 0xd7,
	0x20, 0x43, 0xf6, 0x76, 0xa1, 0x86, 0x38, 0x2c, 0xd8, 0x2e, 0xc5, 0x44, 0xf9, 0x2f, 0x02, 0xe0,
	0xad, 0x06, 0xea, 0x44, 0x67, 0x7c, 0x4a, 0xfd, 0x00, 0xd9, 0x62, 0x57, 0x6b, 0x6e, 0xda, 0x90,
	0xb4, 0x94, 0xeb, 0x6b, 0x18, 0x62, 0x42, 0x6d, 0xb1, 0x4a, 0x93, 0xf9, 0x54, 0x03, 0xa9, 0x35,
	0x4e, 0x23, 0x54, 0xa1, 0x1e, 0x2a, 0x35, 0x79, 0x9d, 0x46, 0x78, 0x0f, 0x72, 0x4c, 0x89, 0xfe,
	0x1b, 0x18, 0xf7, 0x23, 0x48, 0x38, 0x4b, 0x6b, 0x0b, 0xa3, 0xb9, 0xc9, 0xa5, 0x39, 0x6b, 0x90,
	0x9a, 0x15, 0x07, 0xfd, 0x15, 0x9f, 0x29, 0x27, 0x0f, 0x8e, 0xb3, 0x89, 0x67, 0x67, 0xfb, 0x8b,
	0x9a, 0xa3, 0xa2, 0x8a, 0xcb, 0x87, 0xed, 0xbc, 0xa9, 0x88, 0xc9, 0x0e, 0x29, 0x2e, 0x56, 0x5f,
	0x9d, 0x47, 0x67, 0xfb, 0x8b, 0x73, 0x82, 0xc8, 0x70, 0x1c, 0x66, 0x5b, 0x03, 0x46, 0x85, 0x12,
	0x1e, 0x41, 0x97, 0xff, 0xb9, 0x8b, 0xdc, 0x66, 0x6c, 0xed, 0x87, 0x5a, 0x1e, 0x80, 0x9a, 0x1d,
	0x06, 0x55, 0x66, 0xb8, 0x14, 0xee, 0x7f, 0xd7, 0x87, 0xfb, 0xad, 0x80, 0x7b, 0x35, 0xa6, 0x3e,
	0xd8, 0xab, 0xd8, 0x8f, 0xe0, 0x2d, 0x83, 0x3d, 0x1c, 0x93, 0xf9, 0x10, 0x24, 0xbb, 0xb7, 0xaa,
	0xcf, 0x81, 0xa4, 0x4b, 0x3d, 0x54, 0xad, 0x43, 0x56, 0x4f, 0x6b, 0x0b, 0x5a, 0x6e, 0xca, 0x99,
	0x88, 0x0d, 0x7f, 0x43, 0x56, 0xd7, 0xef, 0x82, 0x14, 0x26, 0x8c, 0x43, 0xc2, 0x31, 0xe4, 0xa8,
	0xda, 0x40, 0x51, 0x88, 0x19, 0xc3, 0x94, 0xa4, 0x47, 0x16, 0xb4, 0xdc, 0xe4, 0x92, 0x71, 0x91,
	0x4d, 0xc9, 0x75, 0x11, 0x63, 0x15, 0x4a, 0x36, 0xb1, 0xef, 0x7c, 0x73, 0x2e, 0xfa, 0xff, 0x6e,
	0xb0, 0xf9, 0x5e, 0x03, 0xd3, 0x7d, 0xac, 0xf5, 0x5f, 0xc0, 0x84, 0xab, 0x0c, 0x02, 0x44, 0xb2,
	0x9c, 0x7e, 0xd9, 0xce, 0xcf, 0x28, 0xd2, 0x25, 0xcf, 0x8b, 0x10, 0x63, 0x6b, 0x3c, 0xc2, 0xc4,
	0x77, 0xba, 0x27, 0xf5, 0x3b, 0xe0, 0xb3, 0x00, 0x87, 0x98, 0x2b, 0x34, 0x33, 0x96, 0x7c, 0x17,
	0x56, 0xe7, 0x5d, 0x58, 0x25, 0xd2, 0x2a, 0xe7, 0x0e, 0xdb, 0xf9, 0xef, 0x2e, 0x6d, 0x7a, 0xdc,
	0x99, 0xbd, 0x95, 0x38, 0xc9, 0x86, 0x23, 0x93, 0xe9, 0xeb, 0x60, 0x7c, 0x13, 0x07, 0x1c, 0x45,
	0xe9, 0xd1, 0x2b, 0xd2, 0xfe, 0x74, 0xd8, 0xce, 0x7f, 0x7f, 0x75, 0xda, 0x65, 0x91, 0x65, 0xc3,
	0x51, 0xe9, 0x4c, 0x02, 0xa6, 0x57, 0xe1, 0x6e, 0x05, 0x06, 0x01, 0x13, 0x15, 0xf5, 0x79, 0x90,
	0x8c, 0x50, 0x08, 0x31, 0xc1, 0xc4, 0x17, 0xb4, 0xc7, 0x9c, 0x9e, 0xa1, 0xf8, 0xfb, 0x75, 0x81,
	0xc7, 0x17, 0xaf, 0x8b, 0x8b, 0xef, 0x4b, 0x6f, 0xbe, 0xd0, 0x44, 0xc1, 0xe5, 0x26, 0xf1, 0x54,
	0xc1, 0xfb, 0xe0, 0x73, 0x18, 0xd2, 0x66, 0x4f, 0x8e, 0x19, 0x4b, 0xb5, 0x38, 0x1e, 0x44, 0x5d,
	0x59, 0x55, 0x28, 0x26, 0xe5, 0x5f, 0x63, 0x21, 0x3e, 0x7f, 0x9d, 0xcd, 0xf9, 0x98, 0xd7, 0x9b,
	0x35, 0xcb, 0xa5, 0xa1, 0x9a, 0x61, 0xea, 0x27, 0xcf, 0xbc, 0x2d, 0x35, 0x96, 0xe2, 0x00, 0x26,
	0x45, 0xdb, 0x29, 0x70, 0x43, 0xf8, 0x3d, 0xb0, 0xe6, 0x3b, 0xa1, 0x92, 0xb0, 0x86, 0x09, 0xf2,
	0x24, 0xfc, 0x1f, 0xc1, 0x97, 0x6e, 0x4c, 0xaf, 0x3a, 0xd8, 0xb5, 0x2f, 0x84, 0xd9, 0xe9, 0x58,
	0xcf, 0xf3, 0x1c, 0xb9, 0x85, 0x3c, 0xfb, 0x58, 0x99, 0x2e, 0x48, 0x95, 0x82, 0x80, 0xee, 0x94,
	0x82, 0x60, 0x15, 0x31, 0x06, 0x7d, 0xc4, 0xa4, 0x72, 0x8a, 0xff, 0x5c, 0x5b, 0x63, 0xbd, 0x09,
	0x3b, 0x3c, 0x95, 0xf9, 0x00, 0x64, 0xe2, 0x97, 0xd9, 0xe0, 0xc8, 0x53, 0x9e, 0x7f, 0x51, 0x4b,
	0x39, 0x75, 0x1d, 0x8c, 0x6d, 0xa1, 0x96, 0xd4, 0x44, 0xd2, 0x11, 0xff, 0x8b, 0x2b, 0x9f, 0x54,
	0xdb, 0x90, 0xb5, 0x2f, 0xab, 0x60, 0x3e, 0xd1, 0x40, 0x6a, 0xc0, 0xdb, 0x29, 0xbe, 0x04, 0x26,
	0x42, 0x65, 0x11, 0x00, 0xa6, 0xca, 0xa9, 0x0f, 0xc7, 0x59, 0xdd, 0x81, 0x3b, 0xdd, 0x31, 0x26,
	0xdd, 0x4e, 0xf7, 0xdc, 0xcd, 0x1a, 0x33, 0xb4, 0x7c, 0xf9, 0x8f, 0x83, 0xb7, 0x46, 0xe2, 0xe0,
	0xc4, 0xd0, 0x8e, 0x4e, 0x0c, 0xed, 0xcd, 0x89, 0xa1, 0x3d, 0x3e, 0x35, 0x12, 0x47, 0xa7, 0x46,
	0xe2, 0xd5, 0xa9, 0x91, 0xb8, 0xf7, 0xc3, 0x39, 0x51, 0x54, 0x28, 0x0b, 0xd7, 0x3b, 0x9f, 0x64,
	0xcf, 0xde, 0x95, 0x9f, 0x66, 0x21, 0x8c, 0xda, 0xb8, 0x98, 0x0d, 0x3f, 0x7f, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0xe7, 0xfe, 0xd3, 0xec, 0x39, 0x08, 0x00, 0x00,
}

func (m *StoreCodeAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreCodeAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreCodeAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractExecutionAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractExecutionAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractExecutionAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractMigrationAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractMigrationAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractMigrationAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CodeGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstantiatePermission != nil {
		{
			size, err := m.InstantiatePermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaxCallsLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxCallsLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxCallsLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Remaining != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.Remaining))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxFundsLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxFundsLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxFundsLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CombinedLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombinedLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombinedLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CallsRemaining != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.CallsRemaining))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowAllMessagesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowAllMessagesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowAllMessagesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AcceptedMessageKeysFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedMessageKeysFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedMessageKeysFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AcceptedMessagesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedMessagesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedMessagesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *StoreCodeAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *ContractExecutionAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *ContractMigrationAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CodeGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.InstantiatePermission != nil {
		l = m.InstantiatePermission.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func (m *ContractGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func (m *MaxCallsLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remaining != 0 {
		n += 1 + sovAuthz(uint64(m.Remaining))
	}
	return n
}

func (m *MaxFundsLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CombinedLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallsRemaining != 0 {
		n += 1 + sovAuthz(uint64(m.CallsRemaining))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *AllowAllMessagesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AcceptedMessageKeysFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *AcceptedMessagesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *StoreCodeAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreCodeAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreCodeAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, CodeGrant{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ContractExecutionAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractExecutionAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractExecutionAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, ContractGrant{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ContractMigrationAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractMigrationAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractMigrationAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, ContractGrant{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CodeGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = append(m.CodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeHash == nil {
				m.CodeHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiatePermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiatePermission == nil {
				m.InstantiatePermission = &AccessConfig{}
			}
			if err := m.InstantiatePermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ContractGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &types.Any{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &types.Any{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MaxCallsLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxCallsLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxCallsLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remaining", wireType)
			}
			m.Remaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MaxFundsLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxFundsLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxFundsLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types1.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CombinedLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombinedLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombinedLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsRemaining", wireType)
			}
			m.CallsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallsRemaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types1.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *AllowAllMessagesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowAllMessagesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowAllMessagesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *AcceptedMessageKeysFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedMessageKeysFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedMessageKeysFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *AcceptedMessagesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedMessagesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedMessagesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
